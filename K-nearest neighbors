import numpy as np
import scipy
from mnist_vector import get_labeled_data as get
from scipy.spatial.distance import euclidean as dis

def get_data(train_image,train_label,test_image,test_label):
    (x,y)=get('train-images-idx3-ubyte.gz','train-labels-idx1-ubyte.gz')
    (x1,y1)=get('t10k-images-idx3-ubyte.gz','t10k-labels-idx1-ubyte.gz')
    return x,y,x1,y1

def calc_distance(train_data,test_data):
    length1=len(train_data)
    length2=len(test_data)
    arr=[]
    
    for i in range(length2):
        temp_arr=[]
        for j in range(length1):
           temp=dis(test_data[i],train_data[j])
           temp_arr.append(temp)
        arr.append(temp_arr)
        print('here1')
    return arr

def voting(arr,train_label,k):
    new_arr=[]
    for i in range(0,len(arr)):
        temp=np.argsort(arr[i])
        new_arr.append(temp)
    class_data=np.zeros(len(arr)*10)
    class_data=class_data.reshape(len(arr),10)
    final_class=np.zeros(len(arr))
    for i in range(0,len(arr)):
        for num in range(k):
            index=new_arr[i,num]
            temp_class=train_label[index]
            class_data[i,temp_class] += 1
        class_elem=max(class_data[i])
        class_elem=class_elem[0]
        final_class[i]=class_elem
        print('here2')

    return final_class

def main_func(train_image,train_label,test_image,test_label,k):
    #(train_image,train_label,test_image,test_label)=get_data(train_imagefile,train_labelfile,test_imagefile,test_labelfile)
    arr=calc_distance(train_image,test_image)
    final=voting(arr,train_label,k)
    error=0
    for i in len(test_label):
        if test_label[i]!=final[i]:
            error += 1
            
    error_percent=float(error)/(len(test_label))
    print('Error percent is:')
    print(error_percent)
    
    
    
            
            
        
        
                
    
